/* Check boundaries of moves */
			i = b->row;
			j = b->column;
			k = b->row;
			l = b->column;
			/* for loop from 'a' column until bishops' position, diagonally */
			checkBoundaries(board, &i, &j, &k, &l, 'd', 0);
			/* Check lower position */
			for(; i < b->row && j < b->column; i++, j++)
			{
				if(board[i][j] == '-') /* Empty position */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[i][j] == 'p' && board[i][j] == 'n' && board[i][j] == 'b' && board[i][j] == 'q'
					&& board[i][j] == 'k' && board[i][j] == 'r') /* Occupied - attack */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					i = b->row + 1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					i = b->row + 1;
				}
			}

			/* Check upper position */
			for(; k >= 0 && l < 8; k--, l++)
			{
				if(board[k][l] == '-') /* Empty position */
				{
					printf("eee kraleo\n");
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[k][l] == 'p' && board[k][l] == 'n' && board[k][l] == 'b' && board[k][l] == 'q'
					&& board[k][l] == 'k' && board[k][l] == 'r') /* Occupied - attack */
				{
					printf("eee veiÃ§\n");
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					k = -1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					printf("stop it\n");
					k = -1;
				}
			}
			i = b->row-1;
			j = b->column+1;
			k = b->row+1;
			l = b->column+1;
			/* for loop from bishop until end of board, diagonally */
			/* Check lower position */
			for(; i >= 0 && j < 8; i--, j++)
			{
				if(board[i][j] == '-') /* Empty position */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[i][j] == 'p' && board[i][j] == 'n' && board[i][j] == 'b' && board[i][j] == 'q'
					&& board[i][j] == 'k' && board[i][j] == 'r') /* Occupied - attack */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					i = -1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					i = -1;
				}
			}

			/* Check upper position */
			for(; k < 8 && l < 8; k++, l++)
			{
				if(board[k][l] == '-') /* Empty position */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[k][l] == 'p' && board[k][l] == 'n' && board[k][l] == 'b' && board[k][l] == 'q'
					&& board[k][l] == 'k' && board[k][l] == 'r') /* Occupied - attack */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					k = 8 + 1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					k = 8 + 1;
				}
			}


/* Check boundaries of moves */
			i = b->row;
			j = b->column;
			k = b->row;
			l = b->column;
			/* for loop from 'a' column until bishops' position, diagonally */
			checkBoundaries(board, &i, &j, &k, &l, 'd', 0);
			/* Check lower position */
			for(; i < b->row && j < b->column; i++, j++)
			{
				if(board[i][j] == '-') /* Empty position */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[i][j] == 'P' && board[i][j] == 'N' && board[i][j] == 'B' && board[i][j] == 'Q'
					&& board[i][j] == 'K' && board[i][j] == 'R') /* Occupied - attack */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					i = b->row + 1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					i = b->row + 1;
				}
			}

			/* Check upper position */
			for(; k >= 0 && l < 8; k--, l++)
			{
				if(board[k][l] == '-') /* Empty position */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[k][l] == 'P' && board[k][l] == 'N' && board[k][l] == 'B' && board[k][l] == 'Q'
					&& board[k][l] == 'k' && board[k][l] == 'r') /* Occupied - attack */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					k = -1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					k = -1;
				}
			}
			i = b->row-1;
			j = b->column+1;
			k = b->row+1;
			l = b->column+1;
			/* for loop from bishop until end of board, diagonally */
			/* Check lower position */
			for(; i >= 0 && j < 8; i--, j++)
			{
				if(board[i][j] == '-') /* Empty position */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[i][j] == 'P' && board[i][j] == 'N' && board[i][j] == 'B' && board[i][j] == 'Q'
					&& board[i][j] == 'k' && board[i][j] == 'r') /* Occupied - attack */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = j+97;
					possibilities[count][2] = i+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					i = -1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					i = -1;
				}
			}

			/* Check upper position */
			for(; k < 8 && l < 8; k++, l++)
			{
				if(board[k][l] == '-') /* Empty position */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*4);
					possibilities[count][0] = 'B';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][3] = '\0';
					count = count + 1;
				}
				else if(board[k][l] == 'P' && board[k][l] == 'N' && board[k][l] == 'B' && board[k][l] == 'Q'
					&& board[k][l] == 'k' && board[k][l] == 'r') /* Occupied - attack */
				{
					possibilities = (char**)realloc(possibilities, sizeof(char*)*(count+1));
					possibilities[count] = NULL;
					possibilities[count] = (char*)realloc(possibilities[count], sizeof(char)*5);
					possibilities[count][0] = 'B';
					possibilities[count][1] = 'x';
					possibilities[count][1] = l+97;
					possibilities[count][2] = k+48 + 1;
					possibilities[count][4] = '\0';
					/* Since we found a piece, stop */
					k = 8 + 1;
					count = count + 1;
				}
				else /* Friendly piece - stop */
				{
					k = 8 + 1;
				}
			}

/*
	Check all possible moves for a given direction
	params:
	   - board: board to be checked;
	   - i: minimum line offset;
	   - j: minimum column offset;
	   - k: maximum line offset;
	   - l: maximum column offset;
	   - d: direction to check: (d) diagonal, (u) up, (r) right, (b) down, (l) left;
	   - maxMin: either maximum (1) or minimum (0) boundary checking.
*/
void checkBoundaries(char ** board, int *i, int *j, int *k, int *l, char d, int maxMin)
{
	switch(d)
	{
		/* Diagonal */
		case 'd':
			switch(maxMin)
			{
				case 0:
					for(; ((*i) >= 0 && (*j) >= 0); (*i)--, (*j)--)
					{

					}
					(*i) = (*i) + 1;
					(*j) = (*j) + 1;
					for(; ((*k) < 8 && (*l) >= 0); (*k)++, (*l)--)
					{

					}
					(*k) = (*k) - 1;
					(*l) = (*l) + 1;
				break;

				case 1:
					for(; ((*i) >= 0 && (*j) < 8); (*i)--, (*j)++)
					{

					}
					(*i) = (*i) - 1;
					(*j) = (*j) + 1;
					for(; ((*k) < 8 && (*l) < 8); (*k)++, (*l)++)
					{

					}
					(*k) = (*k) - 1;
					(*l) = (*l) - 1;
				break;

				default:
				break;
			}
		break;

		/* Up */
		case 'u':
		break;

		/* Right*/
		case 'r':
		break;

		/* Down */
		case 'b':
		break;

		/* Left */
		case 'l':
		break;

		default:
		break;
	}
	// printf("i: %d\t j: %d\n", (*i), (*j));
}



for(i = 0; i < nPieces[3]; i++)
		{
			// if(i == 0)
			// {
			// 	printM = wN[i].checkMoves(&wN[i], board, castling, enPassant);
			// 	/*printMatrix(printM, wN[i].possibleMoves, -1);
			// 	freeMatrix(printM, wN[i].possibleMoves);
			// 	printM = NULL;*/
			// }
			// else
			// {
			// 	printM2 = wN[i].checkMoves(&wN[i], board, castling, enPassant);
			// 	/*printMatrix(printM, wN[i].possibleMoves, -1);
			// 	freeMatrix(printM, wN[i].possibleMoves);
			// 	printM = NULL;*/
			// }
		}

printM3 = checkSimultaneousPositions(wN, printM, printM2);
		// printMatrix(printM3, (wN[0].possibleMoves+wN[1].possibleMoves), -1);
		// freeMatrix(printM, wN[0].possibleMoves);
		// freeMatrix(printM2, wN[1].possibleMoves);
		// freeMatrix(printM3, (wN[0].possibleMoves+wN[1].possibleMoves));
		// printM = NULL;
		// printM2 = NULL;


/* Check pawns moves */
		for(i = 0; i < nPieces[0]; i++)
		{
			printM = bP[i].checkMoves(&bP[i], board, castling, enPassant);
			printMatrix(printM, bP[i].possibleMoves, -1);
			freeMatrix(printM, bP[i].possibleMoves);
			printM = NULL;
		}
		/* Check knights moves */
		for(i = 0; i < nPieces[2]; i++)
		{
			printM = bN[i].checkMoves(&bN[i], board, castling, enPassant);
			qsort(printM, bN[i].possibleMoves, sizeof(char*), cmp);
			printMatrix(printM, bN[i].possibleMoves, -1);
			freeMatrix(printM, bN[i].possibleMoves);
			printM = NULL;
		}
		/* Check bishops moves */
		for(i = 0; i < nPieces[4]; i++)
		{
			printM = bB[i].checkMoves(&bB[i], board, castling, enPassant);
			qsort(printM, bB[i].possibleMoves, sizeof(char*), cmp);
			printMatrix(printM, bB[i].possibleMoves, -1);
			freeMatrix(printM, bB[i].possibleMoves);
			printM = NULL;
		}
		/* Check rooks moves */
		for(i = 0; i < nPieces[10]; i++)
		{
			printM = bR[i].checkMoves(&bR[i], board, castling, enPassant);
			qsort(printM, bR[i].possibleMoves, sizeof(char*), cmp);
			printMatrix(printM, bR[i].possibleMoves, -1);
			freeMatrix(printM, bR[i].possibleMoves);
			printM = NULL;
		}
		/* Check queen's moves */
		if(nPieces[6] > 0)
		{
			printM = bQ[0].checkMoves(&bQ[0], board, castling, enPassant);
			qsort(printM, bQ[0].possibleMoves, sizeof(char*), cmp);
			printMatrix(printM, bQ[0].possibleMoves, -1);
			freeMatrix(printM, bQ[0].possibleMoves);
			printM = NULL;
		}
		/* Check king's moves */
		if(nPieces[8] > 0)
		{
			bK[0].checkMoves(&bK[0], board, castling, enPassant);
			qsort(printM, bK[0].possibleMoves, sizeof(char*), cmp);
			printMatrix(printM, bK[0].possibleMoves, -1);
			freeMatrix(printM, bK[0].possibleMoves);
			printM = NULL;
		}

		/* Check all of oponents moves. Compare them to king's moves, to eliminate possible checks or checkmates */








/* IMPORTANT */
/* Check all oponent's moves to remove any possible check or checkmate */
		/* Check pawns moves */
		// for(i = 0; i < nPieces[0]; i++)
		// {
		// 	printM2 = bP[i].checkMoves(&bP[i], board, castling, enPassant, 1);
		// 	qsort(printM2, bP[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&wK[0], &printM, wK[0].possibleMoves, printM2, bP[i].possibleMoves);
		// 	freeMatrix(printM2, bP[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check knights moves */
		// for(i = 0; i < nPieces[2]; i++)
		// {
		// 	printM2 = bN[i].checkMoves(&bN[i], board, castling, enPassant);
		// 	qsort(printM2, bN[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&wK[0], &printM, wK[0].possibleMoves, printM2, bN[i].possibleMoves);
		// 	freeMatrix(printM2, bN[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check bishops moves */
		// for(i = 0; i < nPieces[4]; i++)
		// {
		// 	printM2 = bB[i].checkMoves(&bB[i], board, castling, enPassant, 1);
		// 	qsort(printM2, bB[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&wK[0], &printM, wK[0].possibleMoves, printM2, bB[i].possibleMoves);
		// 	freeMatrix(printM2, bB[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check rooks moves */
		// for(i = 0; i < nPieces[10]; i++)
		// {
		// 	printM2 = bR[i].checkMoves(&bR[i], board, castling, enPassant, 1);
		// 	qsort(printM2, bR[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&wK[0], &printM, wK[0].possibleMoves, printM2, bR[i].possibleMoves);
		// 	freeMatrix(printM2, bR[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check queen's moves */
		// if(nPieces[6] > 0)
		// {
		// 	printM2 = bQ[0].checkMoves(&bQ[0], board, castling, enPassant, 1);
		// 	qsort(printM2, bQ[0].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&wK[0], &printM, wK[0].possibleMoves, printM2, bQ[0].possibleMoves);
		// 	freeMatrix(printM2, bQ[0].possibleMoves);
		// 	printM2 = NULL;
		// }
		// /* Check king's moves */
		// if(nPieces[8] > 0)
		// {
		// 	printM2 = bK[0].checkMoves(&bK[0], board, castling, enPassant);
		// 	qsort(printM2, bK[0].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&wK[0], &printM, wK[0].possibleMoves, printM2, bK[0].possibleMoves);
		// 	freeMatrix(printM2, bK[0].possibleMoves);
		// 	printM2 = NULL;
		// }


/* Check all oponent's moves to remove any possible check or checkmate */
		/* Check pawns moves */
		// for(i = 0; i < nPieces[1]; i++)
		// {
		// 	printM2 = wP[i].checkMoves(&wP[i], board, castling, enPassant, 1);
		// 	qsort(printM2, wP[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&bK[0], &printM, bK[0].possibleMoves, printM2, wP[i].possibleMoves);
		// 	freeMatrix(printM2, wP[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check knights moves */
		// for(i = 0; i < nPieces[3]; i++)
		// {
		// 	printM2 = wN[i].checkMoves(&wN[i], board, castling, enPassant);
		// 	qsort(printM2, wN[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&bK[0], &printM, bK[0].possibleMoves, printM2, wN[i].possibleMoves);
		// 	freeMatrix(printM2, wN[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check bishops moves */
		// for(i = 0; i < nPieces[5]; i++)
		// {
		// 	printM2 = wB[i].checkMoves(&wB[i], board, castling, enPassant, 1);
		// 	qsort(printM2, wB[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&bK[0], &printM, bK[0].possibleMoves, printM2, wB[i].possibleMoves);
		// 	freeMatrix(printM2, wB[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check rooks moves */
		// for(i = 0; i < nPieces[11]; i++)
		// {
		// 	printM2 = wR[i].checkMoves(&wR[i], board, castling, enPassant, 1);
		// 	qsort(printM2, wR[i].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&bK[0], &printM, bK[0].possibleMoves, printM2, wR[i].possibleMoves);
		// 	freeMatrix(printM2, wR[i].possibleMoves);
		// 	printM2 = NULL;
		// }

		// /* Check queen's moves */
		// if(nPieces[7] > 0)
		// {
		// 	printM2 = wQ[0].checkMoves(&wQ[0], board, castling, enPassant, 1);
		// 	qsort(printM2, wQ[0].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&bK[0], &printM, bK[0].possibleMoves, printM2, wQ[0].possibleMoves);
		// 	freeMatrix(printM2, wQ[0].possibleMoves);
		// 	printM2 = NULL;
		// }
		// /* Check king's moves */
		// if(nPieces[9] > 0)
		// {
		// 	printM2 = wK[0].checkMoves(&wK[0], board, castling, enPassant);
		// 	qsort(printM2, wK[0].possibleMoves, sizeof(char*), cmp);
		// 	removeDuplicate(&bK[0], &printM, bK[0].possibleMoves, printM2, wK[0].possibleMoves);
		// 	freeMatrix(printM2, wK[0].possibleMoves);
		// 	printM2 = NULL;
		// }