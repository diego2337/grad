/* Step 7.5: Check if move is valid */
		if(move1 != NULL && move2 != NULL)
		{
			switch(piece)
			{
				case 'p':
					isPawn = 1;
					halfturn = 0;
					for(i = 0; i < nPieces[BLACKPAWN]; i++)
					{
						/* Pawn found; check all possible moves */
						if(bP[i].row == move1[1]-49 && bP[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(bK, board, bP[i].row, bP[i].column, (move2[1]-49), (move2[0]-97));
							bP[i].updatePosition(&bP[i], move2[1]-49, move2[0]-97);
							i = nPieces[BLACKPAWN] + 1;
							halfturn = -1;
						}
					}
				break;

				case 'P':
					isPawn = 1;
					halfturn = 0;
					for(i = 0; i < nPieces[WHITEPAWN]; i++)
					{
						/* Pawn found; check all possible moves */
						if(wP[i].row == move1[1]-49 && wP[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(bK, board, wP[i].row, wP[i].column, (move2[1]-49), (move2[0]-97));
							wP[i].updatePosition(&wP[i], move2[1]-49, move2[0]-97);
							i = nPieces[WHITEPAWN] + 1;
							halfturn = -1;
						}
					}
				break;

				case 'n':
					for(i = 0; i < nPieces[BLACKKNIGHT]; i++)
					{
						/* Knight found; check all possible moves */
						if(bN[i].row == move1[1]-49 && bN[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(wK, board, bN[i].row, bN[i].column, (move2[1]-49), (move2[0]-97));
							bN[i].updatePosition(&bN[i], move2[1]-49, move2[0]-97);
							i = nPieces[BLACKKNIGHT] + 1;
						}
					}
				break;

				case 'N':
					for(i = 0; i < nPieces[WHITEKNIGHT]; i++)
					{
						/* Knight found; check all possible moves */
						if(wN[i].row == move1[1]-49 && wN[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(bK, board, wN[i].row, wN[i].column, (move2[1]-49), (move2[0]-97));
							wN[i].updatePosition(&wN[i], move2[1]-49, move2[0]-97);
							i = nPieces[WHITEKNIGHT] + 1;
						}
					}
				break;

				case 'b':
					for(i = 0; i < nPieces[BLACKBISHOP]; i++)
					{
						/* Bishop found; check all possible moves */
						if(bB[i].row == move1[1]-49 && bB[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(wK, board, bB[i].row, bB[i].column, (move2[1]-49), (move2[0]-97));
							bB[i].updatePosition(&bB[i], move2[1]-49, move2[0]-97);
							i = nPieces[BLACKBISHOP] + 1;
						}
					}
				break;

				case 'B':
					for(i = 0; i < nPieces[WHITEBISHOP]; i++)
					{
						/* Bishop found; check all possible moves */
						if(wB[i].row == move1[1]-49 && wB[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(bK, board, wB[i].row, wB[i].column, (move2[1]-49), (move2[0]-97));
							wB[i].updatePosition(&wB[i], move2[1]-49, move2[0]-97);
							i = nPieces[WHITEBISHOP] + 1;
						}
					}
				break;

				case 'q':
					for(i = 0; i < nPieces[BLACKQUEEN]; i++)
					{
						/* Queen found; check all possible moves */
						if(bQ[i].row == move1[1]-49 && bQ[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(wK, board, bQ[i].row, bQ[i].column, (move2[1]-49), (move2[0]-97));
							bQ[i].updatePosition(&bQ[i], move2[1]-49, move2[0]-97);
							i = nPieces[BLACKQUEEN] + 1;
						}
					}
				break;

				case 'Q':
					for(i = 0; i < nPieces[WHITEQUEEN]; i++)
					{
						/* Queen found; check all possible moves */
						if(wQ[i].row == move1[1]-49 && wQ[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(bK, board, wQ[i].row, wQ[i].column, (move2[1]-49), (move2[0]-97));
							wQ[i].updatePosition(&wQ[i], move2[1]-49, move2[0]-97);
							i = nPieces[WHITEQUEEN] + 1;
						}
					}
				break;

				case 'k':
					for(i = 0; i < nPieces[BLACKKING]; i++)
					{
						/* King found; check all possible moves */
						if(bK[i].row == move1[1]-49 && bK[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(wK, board, bK[i].row, bK[i].column, (move2[1]-49), (move2[0]-97));
							bK[i].updatePosition(&bK[i], move2[1]-49, move2[0]-97);
							i = nPieces[BLACKKING] + 1;
						}
					}
				break;

				case 'K':
					for(i = 0; i < nPieces[WHITEKING]; i++)
					{
						/* King found; check all possible moves */
						if(wK[i].row == move1[1]-49 && wK[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(bK, board, wK[i].row, wK[i].column, (move2[1]-49), (move2[0]-97));
							wK[i].updatePosition(&wK[i], move2[1]-49, move2[0]-97);
							i = nPieces[WHITEKING] + 1;
						}
					}
				break;

				case 'r':
					for(i = 0; i < nPieces[BLACKROOK]; i++)
					{
						/* Rook found; check all possible moves */
						if(bR[i].row == move1[1]-49 && bR[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(wK, board, bR[i].row, bR[i].column, (move2[1]-49), (move2[0]-97));
							bR[i].updatePosition(&bR[i], move2[1]-49, move2[0]-97);
							i = nPieces[BLACKROOK] + 1;
						}
					}
				break;

				case 'R':
					for(i = 0; i < nPieces[WHITEROOK]; i++)
					{
						/* Rook found; check all possible moves */
						if(wR[i].row == move1[1]-49 && wR[i].column == move1[0]-97)
						{
							// printM = bP[i].checkMoves(&wP[i], wK, board, castling, enPassant, 0);
							check = check + checkPossibleCheck(bK, board, wR[i].row, wR[i].column, (move2[1]-49), (move2[0]-97));
							wR[i].updatePosition(&wR[i], move2[1]-49, move2[0]-97);
							i = nPieces[WHITEROOK] + 1;
						}
					}
				break;

				default: /* Not a piece; do nothing */
				break;
			}
		}